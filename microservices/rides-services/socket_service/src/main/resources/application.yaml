server.port: 8094

spring.cloud.stream:
  function:
    definition: process_rides;

spring.cloud.stream.bindings.process_rides-in-0:
  destination: rides

#spring.cloud.stream.bindings.process_ride_requests-in-0:
#  destination: ride-requests
#

spring.cloud.stream.kafka.streams.binder:
  brokers: localhost:9092
  configuration:
    schema.registry.url: http://localhost:8081
    commit.interval.ms: 1000


spring.cloud.stream.kafka.streams.binder.configuration:
  default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
  default.value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde


spring:
  application:
    name: ride-request-service-application
  kafka:
    bootstrap-servers:
      - localhost:9092
    properties:
      schema.registry.url: http://localhost:8081
#    consumer:
#      group-id: group_id
#      auto-offset-reset: latest
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
#      properties:
#        interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
    template:
      default-topic:








#  kafka:
#    streams:
#      binder:
#        applicationId: hello-word-count-sample
#        configuration:
#          commit.interval.ms: 100
#          default:
#            key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
#            value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
